import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
df = pd.read_csv("/content/best-selling-manga.csv").drop_duplicates()
df.head()
df.info()
df.describe()
total_missing = (df.isnull().sum()).sum()
total_cells = np.product(df.shape)

# percent of data that is missing
percent_missing = (total_missing/total_cells) * 100
print("Percent of data that is missing : %d " % percent_missing)
plt.figure(figsize = (20,6))
plt.title('Approximate Sales by Demographic')
sns.barplot(data=df, x='Demographic' , y='Approximate sales in million(s)')
#Drop unused columns
target = 'Approximate sales in million(s)'
df = df.drop(['Manga series','Author(s)','Publisher','Demographic','Serialized'], axis=1)
df.head()
X = df.drop([target],axis=1)
y = df[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.5, random_state=0)
model = RandomForestRegressor(n_estimators=100, random_state=0, min_samples_split=2)
model.fit(X_train,y_train)


y_train_predict = model.predict(X_train)
train_mae = mean_absolute_error(y_train_predict, y_train)
print("MAE", train_mae)

y_test_predict = model.predict(X_test)
test_mae = mean_absolute_error(y_test_predict, y_test)
print("MAE", test_mae)
train_mse = mean_squared_error(y_train, y_train_predict)
test_mse = mean_squared_error(y_test, y_test_predict)

# Placer les performances dans une liste
performance_labels = ['MAE (Train)', 'MAE (Test)', 'MSE (train)', 'MSE (Test)']
performance_values = [train_mae, test_mae, train_mse, test_mse]


plt.figure(figsize=(8, 5))
plt.bar(performance_labels, performance_values)
plt.ylabel('Performance')
plt.title('Performances model')
plt.show()
